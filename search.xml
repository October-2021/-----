<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/02/23/%E6%9C%89%E7%94%9F%E4%B9%8B%E5%B9%B4%E7%B3%BB%E5%88%97/"/>
      <url>/2020/02/23/%E6%9C%89%E7%94%9F%E4%B9%8B%E5%B9%B4%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="有生之年系列"><a href="#有生之年系列" class="headerlink" title="有生之年系列"></a>有生之年系列</h1><ol><li><del>《青春猪头少年》剧场版</del></li><li>《no game no life》第二季</li><li>《约会大作战》第三季重做</li><li>《约会大作战》第四季</li><li>《欢迎来到实力至上主义的教室》第二季</li><li>《樱花庄的宠物女孩》第二季</li><li>jc社倒闭</li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>差分约束学习笔记</title>
      <link href="/2019/10/30/2019-10-30-%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/10/30/2019-10-30-%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="差分约束学习笔记"><a href="#差分约束学习笔记" class="headerlink" title="差分约束学习笔记"></a>差分约束学习笔记</h1><p>嘛，我知道是一个很简单的东西了，看看玩玩嘛</p><p>学差分约束这么久了就知道建图建图，偶然做到题碰见了，具体讲讲吧</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>如果一个系统由$n​$个变量和$m​$个约束条件组成，形成$m​$个形如$a_i - a_j &lt;= k​$的不等式（$k​$为常数）则称其为差分约束系统</p><p>嗯。。。就是咱们平时解的不等式方程组</p><p>一个两个咱们可以解出来，更多的就是机器该干的事情了</p><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>首先咱们再来看一遍这个式子 $a_i - a_j &lt;= k​$，想到了什么？</p><p>看不出来的话吧$a_j​$移到右边。 $a_i &lt;= a_j + k​$ 跟最短路模型中的松弛操作有点像呢。。</p><p>不对，松弛操作是$ dis[v] &gt; dis[u] + e(u,v)​$ ，那么考虑松弛操作做完之后呢？</p><p>显然所有的$dis[v] &lt;= dis[u ] + e(u,v)$ 咱们成功的化成了上面那个式子</p><p>考虑一下这两者中间的联系</p><p>首先，我们考虑在一个图跑完最短路之后显然对于$dis[v] &lt;= dis[u] +e(u,v)​$, 也就是说，在跑完最短路的图中</p><p><strong>$e(u,v)$ 是$dis[v] - dis[u]$的最差情况,</strong>,这与咱们解出不等式方程组后<strong>$k$是$a_i - a_j$的最差情况</strong>一致</p><p>这就启示我们从j到i建一条值为k的边，然后再新图中跑最短路，（跑最短路的过程其实就类似于解不等式方程组的过程</p><p>方程中的无解情况就是$a_j+ k$ &gt; $a_i$, 对应在图中就是存在负环，特判一下就行了</p><p>然后就没了</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>嗯。。。这个看spfa就行</p><p><del>为什么这篇博客还是那么短啊</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对抗搜索和A-B剪枝</title>
      <link href="/2019/10/22/%E6%B5%85%E8%B0%88%E5%AF%B9%E6%8A%97%E6%90%9C%E7%B4%A2%E5%92%8CA-B%E5%89%AA%E6%9E%9D/"/>
      <url>/2019/10/22/%E6%B5%85%E8%B0%88%E5%AF%B9%E6%8A%97%E6%90%9C%E7%B4%A2%E5%92%8CA-B%E5%89%AA%E6%9E%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈对抗搜索和-A-B-剪枝"><a href="#浅谈对抗搜索和-A-B-剪枝" class="headerlink" title="浅谈对抗搜索和$A-B$剪枝"></a>浅谈对抗搜索和$A-B$剪枝</h1><p><del>阿尔法和贝塔怎么打啊呜呜呜</del></p><p>名字特别霸气，道理还是很浅显易懂的</p><a id="more"></a><p><a href="https://www.cnblogs.com/chenxiaoran666/p/AlphaBetaDFS.html#%E5%90%8E%E8%AE%B0" target="_blank" rel="noopener">来自于dalao博客</a> （版权意识薄弱，若有不妥多多包涵）</p><p>本文只介绍一些概念之类的东西，如果想要更好的理解 $or​$模拟推荐看看 <a href="https://blog.csdn.net/UFv59to8/article/details/79331675" target="_blank" rel="noopener">这个博客</a></p><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>在一些博弈论题目中，如果决策双方获胜条件是截然相反的，这时候我们就可以用对抗搜素算法（雾）</p><p>一些求最优解问题也可以的，双方最优解条件相反即可（可以理解为自己拼命的想要取到最优但是对手一直在捣乱）</p><h2 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h2><p>遍历一遍博弈树。。。普通爆搜？ 但是我们可以针对双方，相反这两个特殊条件进行优化</p><p>优化有记忆化搜索和 $Alpha−Beta​$剪枝两种</p><p>记忆化搜索就不说的，这玩意太常见了。。。</p><p>那么，开始我们的正题</p><h3 id="Alpha-Beta-剪枝"><a href="#Alpha-Beta-剪枝" class="headerlink" title="$Alpha - Beta$剪枝"></a>$Alpha - Beta$剪枝</h3><p>对抗搜索的一种比较巧妙的优化吧。其实思想特别简单，这里直接说一下吧</p><p>比如说当前我们要取<strong>最大值</strong>， 那么，我们的儿子显然要取<strong>最小值</strong>（搜索树搜索的是状态）</p><p>我们的一个儿子搜完了，传过来的值是$3$，我们要搜另一个儿子，这个儿子开始往下搜</p><p>然后，这个儿子搜到了一个小于$3​$ 的数，因为儿子要取<strong>最小值</strong>，儿子很高兴的更新为了这个小于$3​$的数，然后继续往下搜。。。</p><p>且慢，既然当前儿子已经确定选的数一定<strong>小于$3​$</strong>,我们已经没有必要继续搜下去了</p><p><strong>因为我们根本就不会取到这个儿子</strong>，取上一个值为$3$的儿子显然更优</p><p>好了，思想讲完了，真的是一个非常好懂的东西，但是在实际的应用中往往能起到很大的作用</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><ul><li>现在正在做的 <a href="https://www.luogu.org/problem/P4363" target="_blank" rel="noopener">[九省联考2018]一双木棋<strong>chess</strong></a></li></ul><p>其他的以后在进行补充</p><p>好了，<del>就这样又水完了一篇博客</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高斯消元</title>
      <link href="/2019/10/18/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/"/>
      <url>/2019/10/18/%E9%AB%98%E6%96%AF%E6%B6%88%E5%85%83/</url>
      
        <content type="html"><![CDATA[<h1 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h1><h2 id="主要作用"><a href="#主要作用" class="headerlink" title="主要作用"></a>主要作用</h2><p>求解线性方程组</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>我们都会解一元一次方程组吧（废话）</p><p>那么二元的呢（有两个未知数），那么我们有两个不同的方程就可以解出来了</p><p>三元三个肯定大家也会解</p><p>所以我们可以猜测，有$n$个不同的方程时可以解出$n$ 元一次方程</p><p>(这个看起来很显然，但是详细证明起来很麻烦，想知道的可以自行上网找资料)</p><p>好了，我们来解一下一万元一次方程吧。。。</p><p>这就是计算机应该解决的问题了</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>回想一下我们平时是怎么解这类方程的</p><p>肯定是消元啊就是不停的拿两个方程相减，逐渐减少未知量的个数</p><p>（这个不会建议重新学习小学课程）</p><p>那么，我们就把我们平时的思想用代码来实现一下吧</p><a id="more"></a><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>首先我们找第$i$行的第$i$个数，用第$i$行的这个数把$1 - n$行的第$i$个数都消去</p><p>我们考虑一下，最后第$i$行一定只剩第$i$个数，其余的都被消去了</p><p>那么就只剩下$n$个一元一次方程组了，依次解出来就好了</p><p>没了，就这么简单</p><h3 id="洛谷模板-高斯消元"><a href="#洛谷模板-高斯消元" class="headerlink" title="洛谷模板 高斯消元"></a><a href="https://www.luogu.org/problem/P3389" target="_blank" rel="noopener">洛谷模板 高斯消元</a></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>, ch = getchar(), f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> a[maxn][maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;a[i][j]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;b[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j == i) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> temp = a[j][i] / a[i][i];<span class="comment">//第i + 1行的第i个数与第i行的第i个数的商</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= n; k ++)</span><br><span class="line">&#123;</span><br><span class="line">a[j][k] -= a[i][k] * temp;<span class="comment">//此时它i以前的数肯定被消去过了（因为每一行消去一个数）</span></span><br><span class="line">&#125;</span><br><span class="line">b[j] -= b[i] * temp;<span class="comment">//答案同理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,b[i] / a[i][i]);<span class="comment">//解一元一次方程组</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么只要我们把上面那份代码交上去，我们就会发现，红红的真喜庆</p><p>为什么会错呢？</p><p><del>这个引入还真失败因为题目都说了如果不存在唯一解了</del></p><p>很显然 $2x + y = 0$ 与$4x + 2y = 0$这个方程是等价的</p><p>所以$n$个方程并不一定能解出来，此时就会出现多解</p><p>一定只有这一种特殊情况吗？咱们做数学题有多少次忘判无解了呢？</p><p>看一下$2x + y = 0$ 与 $4x + 2y = 1$ ，不用我多解释了吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>, ch = getchar(), f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> a[maxn][maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;a[i][j]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;b[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][j]) &gt; <span class="number">1e-6</span>)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>:: swap(a[i][k], a[j][k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>:: swap(b[j], b[i]);</span><br><span class="line"><span class="keyword">break</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"No Solution"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j == i) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> temp = a[j][i] / a[i][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= n; k ++)</span><br><span class="line">&#123;</span><br><span class="line">a[j][k] -= a[i][k] * temp;</span><br><span class="line">&#125;</span><br><span class="line">b[j] -= b[i] * temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,b[i] / a[i][i]);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没卡精度没系数化一过了怎么回事？</p><p>还有这好像叫高斯-约旦消元法（雾）</p><p>高斯消元多了一个我看起来完全没必要的回带操作（雾）</p><p>不管了不管了我写这篇博客本来就不是为了讲高斯消元</p><h2 id="正题（雾）高斯消元套DP"><a href="#正题（雾）高斯消元套DP" class="headerlink" title="正题（雾）高斯消元套DP"></a>正题（雾）高斯消元套DP</h2><p>在我们做DP的时候，有时候列出的方程满足无后效性，而有时候则不那么凑巧</p><p>处理有后效性的方法有很多，高斯消元就是其中一种</p><p>我们考虑无后效性的 DP是就像一元方程</p><p>而有后效性的就会出现多个未知数，正好满足高斯消元的条件</p><p>好了，咕咕咕，以后做多一点题再补充</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树合并</title>
      <link href="/2019/10/15/2019-10-15-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/"/>
      <url>/2019/10/15/2019-10-15-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="线段树合并总结"><a href="#线段树合并总结" class="headerlink" title="线段树合并总结"></a>线段树合并总结</h1><p>也是学了好长时间了，结果发现做题时根本不会用QwQ</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>这个看名字就知道了吧，把两颗线段树合并为一颗，合并就可以做到信息的整合之类的</p><p>一般以权值线段树居多吧</p><a id="more"></a><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>这个其实真没啥好讲的，我j觉得只要你会线段树那么只要稍微看一看就能明白线段树合并，甚至可以看思想后自己造代码</p><p>具体步骤是同步遍历两颗线段树，然后将维护的信息整合，如果一个节点一颗树上有而另一颗树上没有那么直接返回那个节点的编号</p><p>emmm 还有什么，好像真的没了啊</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x | y;</span><br><span class="line">t[x].sum = t[x].sum + t[y].sum;</span><br><span class="line">t[x].l = Merge(t[x].l, t[y].l);</span><br><span class="line">t[x].r = Merge(t[x].r, t[y].r);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了没有了，就这几行</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><del>总感觉我这篇博客写的特别水</del></p><ul><li>像我上文所述，要你会线段树，看几眼应该就明白了线段树合并，好好理解就行了</li><li>在我目前做的题中，线段树合并多用于一些关于查询子树的问题，而这些是线段树可以维护的（权值线段树）所以先每一个点建一颗权值线段树，然后递归合并统计结果</li><li>之后会再补充一些例题啊之类的东西的</li></ul><p>好了，这篇博客就写到这（心虚.jpg)有问题和意见欢迎提出</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卡特兰数</title>
      <link href="/2019/10/14/2019-10-14-%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/"/>
      <url>/2019/10/14/2019-10-14-%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="卡特兰数总结"><a href="#卡特兰数总结" class="headerlink" title="卡特兰数总结"></a>卡特兰数总结</h1><p>考试考到自闭，发现自己对数学和推公式一窍不通</p><h2 id="概念-建议先跳过"><a href="#概念-建议先跳过" class="headerlink" title="概念(建议先跳过)"></a>概念(建议先跳过)</h2><p>卡特兰数是一种经典的组合数,常出现在各种计数问题的数列（雾）</p><p> 最常见的递推 $h(n) = h(0)  * h(n -  1) + h(1) * h(n -2) + … + h(n - 1) * h(0)$（$h(0) = h(1) = 1$)</p><p>另类递推式$h(n) = h(n - 1) * (4 * n - 2)$</p><a id="more"></a><p>通解 $h(n) = C^n_{2n} - C^{n - 1}<em>{2n} ​$,  也可以写作$h(n) = C^n</em>{2n} / (n + 1)​$</p><p>前几项为$1,  1, 2, 5, 14, 42, 132, 429, 1430, 4862…​$（懒得打了）</p><p>这有什么用呢，光看公式我也不知道啊？从题目入手吧</p><h2 id="进出栈顺序"><a href="#进出栈顺序" class="headerlink" title="进出栈顺序"></a>进出栈顺序</h2><h3 id="递归公式"><a href="#递归公式" class="headerlink" title="递归公式"></a>递归公式</h3><p>假设有$n$个小球，每个小球互不相同，问有多少种<strong>进出栈</strong>的顺序(进栈的顺序为$1- n$)</p><p>首先，进栈的顺序已经<strong>确定</strong>，出栈的顺序是<strong>不定</strong>的，所以每一个数都有可能<strong>最后</strong>再出栈（好好理解一下）</p><p>比如一共有5个数，我想让第3个最后出栈，只需要先让1,2进栈,出栈，然后让3入栈，再把4,5进栈出栈就行了</p><p><strong>最后</strong>出栈的数为$k$ 那么显然前$k - 1$个数已经完成了进栈出栈，后$n - k$个数显然也完成了进栈出栈  </p><p>显然我们已经把问题缩小了范围，此时$f(k) = f(k - 1) * f(n - k)​$ </p><p>显然我们每一个数都有可能最后再出栈， 而且出栈最后的一个数不同出栈的顺序一定不同，所以开头的递推方程式就写出来了</p><h3 id="通解"><a href="#通解" class="headerlink" title="通解"></a>通解</h3><p>我们可以用折线法来解决这一问题</p><p>n个小球，每一次进栈出栈，我们显然一共要进行2n次操作，把问题放在坐标系上；</p><p><img src="https://i.loli.net/2019/10/14/URutVhnj8ZAYp9a.png" alt></p><p>我们可以把一次入栈当做向右上方走，一次出栈当做往右下方，但是显然，没有入栈就出栈是不行的</p><p>所以我们可以用总数减去非法数</p><p>总数 $C^n_{2n}$（从·2n次操作中任取n次操作入栈）</p><p>非法数的计算方法是，如果过程非法， 那么一定会碰到$y = -1​$这条线</p><p>取第一次到达$y = -1$的点，在它之后的折线关于$y = -1$做对称，最后的那个点一定会到达(2n, -2)，所以不合法的情况就是$C^{n - 1}_{2n}$</p><p>剩余两步去哪了呢？</p><p>详细解释一下，我们之后取折线改变的是将一个入栈操作改为了出栈操作，而且是任意一步。并没有改变组合数随机取的性质</p><p>假设我们取完对称后还有$k$次操作,那么毫无疑问,入栈比出栈次数多1，根据$C^m_n = C^{n - m}_n$</p><p>我们将它变为出栈次数比入栈次数多1，反过来，如果出栈比入栈多2，一定满足一个到达了$y = -1$，还有一个是我们手动翻的啦</p><p>通解就推出来啦</p><p><strong>日常咕咕咕，以后会再补充一些其它东西</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搬迁公告</title>
      <link href="/2019/10/14/2019-10-14-%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81%E5%85%AC%E5%91%8A/"/>
      <url>/2019/10/14/2019-10-14-%E5%8D%9A%E5%AE%A2%E6%90%AC%E8%BF%81%E5%85%AC%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>之前一直在洛谷博客，但是因为不太美观扩展也不太多，使用起来不太方便</p><p>也考虑过用博客园，但是一直想着美化美化最后GSS代码粘了一堆，搞得乱七八糟的，最后主动爆破</p><p>关于hexo博客也爆破过一个，其实建这个博客也不算太麻烦，根据教程一步一步来就好了</p><p>如果土豪玩家嫌弃静态博客发布修改麻烦的话，可以尝试自购服务器+域名+WordPress的组合</p><p>好了，希望大家看我的博客有所帮助</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客文章</title>
      <link href="/2019/10/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2019/10/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Welcome to my blog, enter password." />    <label for="pass">Welcome to my blog, enter password.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">U2FsdGVkX19n7EZrlRUqsiGyJrqvnVjeQ2Rofgm2i5yXTQSWNJgWpBXWGemeYHIkvTmKJd4m5Wbevz0GUiZo4Ndu2+mcn6vMp8VBFQXFx3RlL1rrskRtEUb2se1YAFlyO6l1W2usYU5NetA9Cbm51cZy5Gocltjs4ZbinPx/G2MfP2GqlGR2x+e6jEVJ9e6muBlwYMZGImSLlBJCL5/+pxQp/rldJGSQwgEI4ge/cdkkszJeaOHa6dfjD61FLVpDCSqXxKxfmfXD4tYBCj3inofcPH5kxzGTurUcVNEAsxP0w+ysWASgfK1/JwPl1ZB7l/TIeLksJq1ZDRnluwExmpxJ11ZpJokvD2tI3fKMxvkA9eQPr3+cr8EvA943H3SKP6+zC1onbUnmDpE86lPAlFFRZYdnToQ5QVcAPUDpxvmwySh5Bnc/6s4S/dI0KUwo1aBYHbx8YMwgRuEB2uGL7GFPi4elG0JeeStcXhfTW294omHp0vc6tI4HM6NtUvJ46BFK0I137xzriaMLdsWLA2XMw0bFYnIPMp0Ug8ujEucKWsTxL2ff7zlst0yLP+aSpa++ug7y1KacPJRJbNd2kQ8C8FD86LMPo+jCp/crgJ+4o4ozqh7o8wwF9HhyfYI0WxZbfR2WR+NLNdAWyvDDQjIiA/8f82mXAfLsl2kPopNjkAQA6tG6kmaCTnmceYjr</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主席树</title>
      <link href="/2019/10/12/%E5%85%B3%E4%BA%8E%E4%B8%BB%E5%B8%AD%E6%A0%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/12/%E5%85%B3%E4%BA%8E%E4%B8%BB%E5%B8%AD%E6%A0%91%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="关于主席树的一些总结"><a href="#关于主席树的一些总结" class="headerlink" title="关于主席树的一些总结"></a>关于主席树的一些总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学主席树其实已经有一段时间了，之前一直认为自己理解了，也没有写博客总结。在一段时间后看到了可持久化tire树后想总结他们的不同时，才发现自己并不算太理解主席树（关于它们的不同将在tire树总结处有介绍）</p><p>这篇博文偏基础，里面有很多我对于主席树的理解，如果有错误欢迎指正，有见解也欢迎提出，蒟蒻感激不尽</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>主席树（名字奇奇怪怪的），<del>顾名思义是主席发明出来的树</del> 也叫可持久化线段树，发明这种数据结构的dalao名字缩写为（HJT），<del>正好是某个领导人名字的缩写</del>，主席树由此得名</p><h3 id="一些其它的东西"><a href="#一些其它的东西" class="headerlink" title="一些其它的东西"></a>一些其它的东西</h3><p>好了咱们不讨论这个名字，既然是可持久化数据结构，那么应该可以支持查询历史版本，就比如说查询一个修改前的线段树和修改后的线段树的某些信息（这就是可持久化数组）</p><p>好了，通过模板题来理解一下吧</p><h4 id="洛谷模板-可持久化数组"><a href="#洛谷模板-可持久化数组" class="headerlink" title="洛谷模板 可持久化数组"></a><a href="https://www.luogu.org/problem/P3919" target="_blank" rel="noopener">洛谷模板 可持久化数组</a></h4><p><strong>大意</strong></p><p>维护一个支持修改和查询历史版本某一位置的值的数组（每一次修改更新一个版本）</p><p>怎么解决呢？</p><p>每一次修改重新开一个数组？单次操作双$O(n)$空间时间双爆炸</p><p>题解中有dalao用并查集切掉了这道题（可是我不会）</p><p>我们考虑，其实一次操作中的改动是非常小的，没有必要都改</p><p>我们考虑将每一个版本建一颗线段树，然后每一次修改的时候新建一个新的根节点，只改需要改的$log(n)$个节点，其他节点完全继承上一个根节点即可，这样保证了一次操作的时间空间均为$log(n)$,就可以通过这道题了</p><p>那么，是不是并查集更直观且优秀呢？要这个数据结构干嘛呢？</p><p>其实，只要再加一个任意查询区间的操作，就可以充分体现这样做的优越性了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e8</span> + <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> x = <span class="number">0</span>, ch = getchar(), f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>) f = <span class="number">-1</span>;ch = getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>, ch = getchar();</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> root[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ cnt;</span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line">t[p].val = a[l];</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = l +r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">t[p].l = build(l, mid);</span><br><span class="line">t[p].r = build(mid+<span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> q, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ cnt;<span class="comment">//新建一个节点</span></span><br><span class="line">t[p] = t[pre];<span class="comment">//完全继承它的上一个节点</span></span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line">t[p].val = w;<span class="comment">//修改</span></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(q &lt;= mid) t[p].l = ins(t[p].l, l, mid, q, w);<span class="comment">//按线段树的方法递归下去，显然会新建log(n)个节点</span></span><br><span class="line"><span class="keyword">else</span> t[p].r = ins(t[p].r, mid + <span class="number">1</span>, r, q, w);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> t[p].val;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(q &lt;= mid) <span class="keyword">return</span> query(t[p].l, l, mid, q);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(t[p].r, mid + <span class="number">1</span>, r, q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line">q = read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = read();</span><br><span class="line">&#125;</span><br><span class="line">root[<span class="number">0</span>] = build(<span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op, x, rt, w;</span><br><span class="line">rt = read();</span><br><span class="line">op = read();</span><br><span class="line">x = read();</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">w = read();</span><br><span class="line">root[i] = ins(root[rt], <span class="number">1</span>, n, x, w);<span class="comment">//一个版本新开一个root</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, query(root[rt], <span class="number">1</span>, n, x));<span class="comment">//查询类似于线段树</span></span><br><span class="line">root[i] = root[rt];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码应该还是直观易懂的</p><p>没有看懂没有关系，这并不是这个数据结构的主要用途，我们会在下面再进一步讲解</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>其实要求我们求历史版本的题，（至少我认为没多少）主席树的主要应用并不在此</p><p>还是用板子题引入吧</p><h4 id="洛谷-主席树"><a href="#洛谷-主席树" class="headerlink" title="洛谷 主席树"></a><a href="https://www.luogu.org/problem/P3834" target="_blank" rel="noopener">洛谷 主席树</a></h4><p><strong>大意</strong></p><p>静态区间第k小（即不修改）</p><p>思考一下，如果每个区间都是$[1, n]$，怎么搞</p><p>普通线段树不符合要求，我们应该建一个权值线段树（即维护的不再是数组，而是数值）</p><p>如图</p><p>有一个数组 a[4] = {2, 4, 4, 7};</p><p><img src="https://i.loli.net/2019/10/13/5lH4miUkRzePqfy.png" alt></p><p>很显然，权值线段树记录的是每个数出现了多少次（图画的丑勿喷）</p><p>这样我们就可以很轻松的求出询问是 $[1,n]$ 的区间第k大</p><p>这真的不用我再说了吧，就是比如查询第3， 然后一开始在根节点发现左儿子中的数出现次数是1</p><p>去右节点查第二 （即3减1） 发现左节点为2 = 2，进入左节点，发现叶节点出现次数2 =2，返回叶节点所代表的数值4 （这再看不懂过分了啊QwQ）</p><p>那么，我们现在需要任意定区间查<strong>区间第k大</strong>，这怎么办呢？</p><p>我可以每个区间建一个权值线段树！</p><p>枚举左端点和右端点 + 建树$O(n ^ 2  * nlog(n))​$,恭喜咱们创造出一个比暴力还废的算法</p><p>然后我们可以发现，权值线段树具有<strong>前缀和</strong>的性质，即可以相减</p><p>比如说我们 $[1, 3], [1, 4]$（这个区间为数组的区间）各建了一个权值线段树</p><p>那么我们查寻数组中$[3,4]$区间完全可以用后一个权值线段树的和前一个权值线段树相同的节点上<strong>出现的次数相减</strong>，就是$[3,4]$区间中该数（该区间）出现的次数（看不懂没关系，后面用代码辅助理解）</p><p><strong>在说的通俗易懂一点$[3, 4]$数值4出现的次数就是$[1, 4],[1, 3]$中数值4出现的次数相减</strong></p><p>变成$O(n * nlog(n)) ​$ 了呢</p><p>但是这样还是不能接受，想一想我们刚才说的？</p><p><strong>每一次变化很小，反映在树上只有log(n)的范围</strong></p><p>$[1, 3]，[1, 4]$在树上的区别呢？显然$log(n)$啊， 请用心理解</p><p>因此我们不用开n棵权值线段树，只要一棵主席树就够了</p><p>具体实现的时候我们从1 到 n扫一遍数组，每次开一个新的根节点，需要修改的地方修改，其余完全继承上一个根节点的，查询时区间为$[l, r]$ ， 我们只要同时查r和l - 1所代表的根节点像刚才一样相减，权值线段树一样查询就可以了</p><p>还是代码直观些</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e7</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">int</span> sum;</span><br><span class="line">&#125;t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> root[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch)) ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x = x * <span class="number">10</span> + ch -<span class="string">'0'</span>, ch = getchar();</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ cnt;</span><br><span class="line">t[p].sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line">t[p].l = build(l, mid);</span><br><span class="line">t[p].r = build(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ cnt;</span><br><span class="line">t[p] = t[pre];<span class="comment">//完全继承上一个节点，只会修改log(n)个节点</span></span><br><span class="line">t[p].sum ++;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid) t[p].l = add(t[pre].l, l, mid, x);</span><br><span class="line"><span class="keyword">else</span> t[p].r = add(t[pre].r, mid + <span class="number">1</span>, r, x);<span class="comment">//一路递归下去</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> x = t[t[v].l].sum - t[t[u].l].sum;<span class="comment">//和上文一样所说的相减操作</span></span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= k) <span class="keyword">return</span> query(t[u].l, t[v].l, l, mid, k);<span class="comment">//和权值线段树一样的查询操作</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> query(t[u].r, t[v].r, mid + <span class="number">1</span>, r, k - x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = read();</span><br><span class="line">q = read();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = read();</span><br><span class="line">b[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>:: sort(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</span><br><span class="line">m = <span class="built_in">std</span>:: unique(b + <span class="number">1</span>, b + <span class="number">1</span> + n) - b - <span class="number">1</span>;<span class="comment">//离散化操作</span></span><br><span class="line">root[<span class="number">0</span>] = build(<span class="number">1</span>, m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="built_in">std</span>:: lower_bound(b + <span class="number">1</span>, b + <span class="number">1</span> + m, a[i]) - b;</span><br><span class="line">root[i] = add(root[i - <span class="number">1</span>], <span class="number">1</span>, m, t);<span class="comment">//每一次新建一个根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(q --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line">x = read();</span><br><span class="line">y = read();</span><br><span class="line">z = read();</span><br><span class="line"><span class="keyword">int</span> t = query(root[x<span class="number">-1</span>], root[y], <span class="number">1</span>, m, z);<span class="comment">//同时查询r和了l - 1所代表的权值线段树</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b[t]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请结合理解，我觉得还是很简单易懂的</p><p>好啦，我们基础的主席树到这里就学完了<del>（写篇博客真累）</del></p><h2 id="一些我自己的感受吧"><a href="#一些我自己的感受吧" class="headerlink" title="一些我自己的感受吧"></a>一些我自己的感受吧</h2><ul><li>主席树并不是一个什么难的数据结构，主要在于权值线段树和前缀思想的应用</li><li>主席树其实就是n棵权值线段树，就是用一些特殊手段使得空间和时间开销不是那么大（可以这么理解）</li><li>不要认为有了主席树时权值线段树一无是处，线段树合并主席树时是做不到的，有时候必须要建很多权值线段树</li><li>主席树很难修改因为最坏的情况下一次要修改n棵树，需要用到树套树（以后会补充）</li></ul><p>那么，就先写到这里，以后会逐渐补充一些进阶知识和应用，如果有帮助，不妨关注一下我的博客</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/10/12/hello-world/"/>
      <url>/2019/10/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日记（雾）</title>
      <link href="/1000/10/12/%E6%97%A5%E8%AE%B0%EF%BC%88%E9%9B%BE%EF%BC%89/"/>
      <url>/1000/10/12/%E6%97%A5%E8%AE%B0%EF%BC%88%E9%9B%BE%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码才给看QwQ" />    <label for="pass">输入密码才给看QwQ</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
